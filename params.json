{"name":"Ega-tutorial","tagline":"This is a detailed introduction for EGA users to get a quick start.","body":" <h1 align=\"center\">EGA tutorial</h1> \r\n##[Introduction](#1)\r\n##[Overview of  Processing Stages](#2)\r\n####[Multiple Genome Alignment](#2.1)\r\n####[Self-alignment](#2.2)\r\n##[Part A: Online Data Analysis Platform](#3)\r\n####[Example 1: Yeast Genomes Alignment](#3.1)\r\n####[Example 2: Bacteria Genomes Alignment](#3.2)\r\n####[Example 3: Self-alignment for Paralog Detection](#3.3)\r\n##[Part B: Local Open-source Packed Archives](#4)\r\n####[Availability](#4.1)\r\n####[Notice](#4.2)\r\n####[Instruction](#4.3)\r\n##[FAQ](#5)\r\n####[What types of data does EGA support](#5.1)\r\n####[Explanation of result files and file format](#5.2)\r\n####[对align的结果统计和展示](#5.3)\r\n\r\n<h1 align=\"center\">EGA tutorial</h1> \r\n<a name=\"1\" />\r\n##Introduction\r\n\r\nMultiple genome alignments play a fundamental role in many biological realms such as evolution and genomics. Easy Genome Aligner (EGA) is an integrated application designed to make complicated whole genome multiple alignments really accessible for most biologists.\r\n\r\nEGA is suitable for either small or huge genomes, allowing alignments of several whole genomes, especially for large proportion of neutrally evolving regions. It has been successfully used both for closely related species and also for those across large evolutionary distance such as human and mouse. Widely used in the scientific community and servings, several validation studies have shown that the core programs of EGA are powerful methods for obtaining efficient and accurate alignments.\r\n\r\nTwo major functions of EGA are multiple genome alignment for construction of phylogenetic relationship and self-alignment for paralogous detection. The tools are available through both a web-based graphical interface and a local operating virtual machine.\r\n\r\nTo meet different needs, the application is available through both an online data analysis platform with a friendly user interface to deal with operations of smaller-scale sequence data, and a full functional virtual machine. \r\n\r\n<a name=\"2\" />\r\n##Overview of  Processing Stages\r\n\r\n<a name=\"2.1\" />\r\n###Multiple Genome Alignment\r\n\r\nThe explanation of strategy and primary procedures is presented below.  \r\n\r\n**Repeat mask：** All of the sequences used to construct alignments should be identified and annotated against a repeats library in order to make all repetitive elements masked. This procedure is operated to ensure that align programs will not be confused by similar sequences. The software we use here is RepeatMasker, and it may take a relative long run time for large sequences.\r\n\r\n**Partition sequences:** Chromosomal sequences will be divided into several small files if their length exceeds the maximum length of 500000bp. This step is necessary since comparison between two over-length sequences will seriously reduce the processing efficiency. \r\n\r\n**Pairwise alignment:** Sequences from different species are firstly pairwise aligned with Blastz or its improved version Lastz. It’s previous version was initially designed as underlying alignment program of PipMaker server and has been widely employed in numerous science websites such as EnsemblGenomes (https://www.ensembl.org/) and UCSC Genome Browser (https://genome.ucsc.edu/). A distinct advantage of Blastz/Lastz is its sensitivity in alignment for a large percentage of neutrally evolving regions. Since many genomic sequences have no apparent traces of natural selection, most existing programs are not competent to detect those segments at genome-wide scale. This step takes FASTA sequences as input and produces output in its own format lav.\r\n\r\n**Chaining and netting:** After primary alignments, we apply the chaining algorithms to building chains of related fragments. Since many fragments might match with several others, the strategy is to keep the longest one. Chaining is also used to eliminate some redundant alignments and poor quality fragments. Then, extended chain alignments are further linked into larger blocks by netting. The format of the result files are axt. \r\n\r\n**Mafing:** Convert previous step result to MAF format. MAF format contains genomic location information for aligning sequence blocks, which is convenient for further analysis.\r\n\r\n**Construct phylogenetic tree:** Users may choose to submit a phylogenetic tree of input genomes, or to make use of the phylogenetic tree constructed by our programs for next step. The tree will provide a reference for the combination of multiple alignments.\r\n\r\n**Combine multiple pairwise results:** Pairwise alignments are grouped to generate whole genome multiple alignments by Multiz. Multiz is a phylogenetic tree directed alignment tool, it uses the tree constructed previously and start with sequences closely related on evolution scale. This step is not needed if we just have two species.\r\n\r\n**Re-aligning:** Since the combination of pairwise alignments may give rise to new gaps and alignment disruption, we take another process of re-align to fix this problem and make sure that sequences of all species are well-aligned. There are three sequence alignment methods for users to select depending on their needs.\r\n  \r\n\r\n<a name=\"2.2\" />\r\n###Self-alignment for paralog detection\r\n\r\nAnother major function provided in EGA is paralog sequence detection.  \r\n\r\n**Self-alignment:** First, genome sequences are aligned to itself to find some similar segments. The aligment tool is as same as multiple alignment described above. \r\n\r\n**Chaining:** related fragments are joined together by chaining algorithms to build longer candidates.  \r\n\r\n**Two-wheeled blast:** n order to explore similar sequences at the most extent, candidates being chained above are used to perform two-wheeled blast against all of the whole genome.  \r\n\r\n**Filter and cluster:** Pairs of similar sequences are then being filtered and clustered by coverage and similarity. Pairs which make up of more than 90% of each other and with a similarity value greater than 90% will be finally preserved.\r\n\r\n<a name=\"3\" />\r\n##Part A: Online Data Analysis Platform  \r\n\r\nOnline data analysis platform is constructed for pairwise/multiple alignments with genomes smaller than 20M. We provide user-friendly interfaces and detailed instructions. Users can visit online EGA through......\r\n\r\nThis image shows a screen snapshot of our website Home Page. The name of our application is Easy Genome Aligner. Menu bars on the top  show the main buttons, going from left to right as: Home, Upload, Align, Process, Contact. At the top right-hand corner shows two links for you to log in or register a new ID. \r\n\r\nYou can either register a new  ID or log into the public ID with the username \"guest\" and password \"password\".\r\n\r\nTwo major functions of our application are multiple genome alignment and paralog detection via self-alignment. You could click on the “view details” button for more information. Following are three example descriptions corresponding to different purposes of users.\r\n\r\n<a name=\"3.1\" />\r\n####**Example 1: Yeast Genomes Alignment**\r\n\r\nLet’s take this unicellular eukaryotic model organism for example and provide a detailed description. \r\n\r\nWe are going to compare nine yeast strains, which are S288c, Lachancea kluyveri, Saccharomyces bayanus, Saccharomyces bayanus var. uvarum, Saccharomyces castellii, Saccharomyces kudriavzevii, Saccharomyces mikatae, Saccharomyces paradoxus, Saccharomyces pastorianus respectively. Sequences can be found in the download section of http://www.yeastgenome.org/download-data/sequence.\r\n\r\n![alt text](/Users/liuliwei/Desktop/EGA submission/pic/yeast_genome.png \"yeast_genome\")\r\n\r\n**Data download and file format change**\r\n Rename the downloaded files with a brief name, which will also be used as the genome name in result files. We provide a command line for file format processing. Files processed can be used for alignment.\r\n\r\n>perl -ne \"if(/^\\>/){s/\\W+/_/g; s/^\\_/>/; s/\\_$/\\n/;} print;\" example.fasta >out.fa\r\n\t\r\nNotice that this command can process most of the sequences that are not downloaded form NCBI. For those sequences downloaded from NCBI, our website can process them automatically. \r\n\r\nFor users' convenience, we have provided a test account stored with the data used for example tests. You can log into the account for yeast with the username \"bacteria\" and password \"password\".\r\n\r\n**Upload**\r\nclick on \"Upload\" to enter the page after you log in the site. The upload page shows an upload dialog. If you need to upload a genome file, you can select a file in the open dialog box, and click on the “Upload” button. When you are doing a web-based alignment instead of in the VM, the individual file size is limited to 30M. Only three kinds of file types are accepted: .fasta, .fasta.gz, .newick. You can click on the red button to remove an uploaded file. _**Do not**_ refresh the page while uploading a file!\r\n\r\n**Alignment**\r\nYou can click on the “Align” button on the menu to enter the align page. At this page you should set some parameters for the construction of alignments. Some parameters are required, such as the name of this alignment job, a target genome, at least one query genome. We have provided the recommended values for Minimum fragment length and a realigning method. Besides, you can choose to provide a guide tree or not. The absence of a guide tree will take a while for us to generate one. \r\n\r\nAfter parameter settings are completed, you can click on “Begin aligning” button to jump to the processing page automatically.\r\n\r\nThis page displays three dialog boxes. The dialog above contains parameters set in the previous step. You can’t open a new job if the current one has not finished. However, when your job is completed or you want this job terminated, you can click on the red button at the top-right corner and open up a new task. \r\nThe results are provided for you to download but terminated job can’t recover.\r\n\r\nThe middle dialog contains buttons for different processing stages. Among them, the first step is data pre-processing. You can click on the “prepare.sh” to start a job running. The information section contains general information about the running task including the start and end times and running status. \r\n\r\nBelow is progress information for the particular run step. When the last line shows “\\***DONE***”, the step is supposed to be completed. Users may refresh this page and move on to the next step. \r\n\r\nAfter the pre-processing completes, refresh the page and buttons for the rest steps will appear in the middle dialog box. Users may click on buttons in sequence  to generate an alignment. For every step, when the last line shows “\\***DONE***”, the task is completed and you can move on to the next step.\r\n\r\n**Downloading results**\r\nAfter all jobs are done, users may click on the red “finish” button and download the results generated in every step.（对于这9个酵母基因组比对的用时情况如下所示。  \r\n\r\n<a name=\"3.2\" />\r\n####**Example 2: Bacteria Genomes Alignment**\r\n\r\n**Data download**  \r\nThere are two perl programs  provided to help users to download genome sequences from NCBI conveniently. The basic syntax are as shown below.  \r\n\r\n*Get_seq.pl* is used for downloading individual genome sequence.  \r\n\r\n>perl ~/Scripts/withncbi/util/batch_get_seq.pl \\$genome_id $dir  \r\n\t\r\n*Batch_get_seq.pl* is used for downloading a batch of genome sequences at a time.  \r\n\r\n>perl ~/Scripts/withncbi/util/batch_get_seq.pl -r -p -f yeast_name_seq.csv 2>&1 | tee yeast_name_seq.log\r\n\r\nGenome sequences downloaded from NCBI need not the step to change the formats of headers. Downloaded genomes are named as the corresponding RefSeq numbers in NCBI, which will also be processed as the genome name in result files.\r\n\r\nWe also provided a test account stored with the data used for example tests. You can log into the account for bacteria with the username \"bacteria\" and password \"password\".\r\n\r\nThe process of alignment is similar to that of yeast. You can skip this part if you have read the instruction for yeast. If not, the instruction below will help you get a hands on start.\r\n\r\n**Upload**\r\nclick on \"Upload\" to enter the page after you log in the site. The upload page shows an upload dialog. If you need to upload a genome file, you can select a file in the open dialog box, and click on the “Upload” button. When you are doing a web-based alignment instead of in the VM, the individual file size is limited to 30M. Only three kinds of file types are accepted: .fasta, .fasta.gz, .newick. You can click on the red button to remove an uploaded file. **_Do not_** refresh the page while uploading a file!\r\n\r\n**Alignment**\r\nYou can click on the “Align” button on the menu to enter the align page. At this page you should set some parameters for the construction of alignments. Some parameters are required, such as the name of this alignment job, a target genome, at least one query genome. We have provided the recommended values for Minimum fragment length and a realigning method. Besides, you can choose to provide a guide tree or not. The absence of a guide tree will take a while for us to generate one. \r\n\r\nAfter parameter settings are completed, you can click on “Begin aligning” button to jump to the processing page automatically.\r\n\r\nThis page displays three dialog boxes. The dialog above contains parameters set in the previous step. You can’t open a new job if the current one has not finished. However, when your job is completed or you want this job terminated, you can click on the red button at the top-right corner and open up a new task. \r\nThe results are provided for you to download but terminated job can’t recover.\r\n\r\nThe middle dialog contains buttons for different processing stages. Among them, the first step is data pre-processing. You can click on the “prepare.sh” to start a job running. The information section contains general information about the running task including the start and end times and running status. \r\n\r\nBelow is progress information for the particular run step. When the last line shows “\\***DONE***”, the step is supposed to be completed. Users may refresh this page and move on to the next step. \r\n\r\nAfter the pre-processing completes, refresh the page and buttons for the rest steps will appear in the middle dialog box. Users may click on buttons in sequence  to generate an alignment. For every step, when the last line shows “\\***DONE***”, the task is completed and you can move on to the next step.\r\n\r\n**Downloading results**\r\nAfter all jobs are done, users may click on the red “finish” button and download the results generated in every step.  \r\n\r\n<a name=\"3.3\" />\r\n####**Example 3: Self-alignment for Paralog Detection**\r\n\r\n**Data download and file format change**\r\nHere we take yeast S288c as an example. Sequences can be found in the download section of http://www.yeastgenome.org/download-data/sequence.\r\n\r\nRename the downloaded file with a brief name. This name will also be used as the genome name in result files. We provide a command line for file format processing. Files processed can be used for alignment.\r\n\r\n>perl -ne \"if(/^\\>/){s/\\W+/_/g; s/^\\_/>/; s/\\_$/\\n/;} print;\" example.fasta\r\n\r\nWe also provided a test account stored with the data used for example tests. You can log into the account for paralog alignment with the username \"paralog\" and password \"password\".\r\n\r\n**Upload**\r\nclick on \"Upload\" to enter the page after you log in the site. The upload page shows an upload dialog. If you need to upload a genome file, you can select a file in the open dialog box, and click on the “Upload” button. When you are doing a web-based alignment instead of in the VM, the individual file size is limited to 30M. Only three kinds of file types are accepted: .fasta, .fasta.gz, .newick. You can click on the red button to remove an uploaded file. _**Do not**_ refresh the page while uploading a file!\r\n\r\n**Alignment**\r\nYou can click on the “Align” button on the menu to enter the align page. At this page you should set some parameters for the construction of alignments. Some parameters are required, such as the name of this alignment job and a target genome. In order to do paralog detection, you should check the “self alignment” box so that you cannot choose query genomes. We have provided the recommended values for Minimum fragment length and a realigning method. Besides, you can choose to provide a guide tree or not. The absence of a guide tree will take a while for us to generate one. \r\n\r\nAfter parameter settings are completed, you can click on “Begin aligning” button to jump to the processing page automatically.\r\n\r\nThis page displays three dialog boxes. The dialog above contains parameters set in the previous step. You can’t open a new job if the current one has not finished. However, when your job is completed or you want this job terminated, you can click on the red button at the top-right corner and open up a new task. \r\nThe results are provided for you to download but terminated job can’t recover.\r\n\r\nThe middle dialog contains buttons for different processing stages. Among them, the first step is data pre-processing. You can click on the “prepare.sh” to start a job running. The information section contains general information about the running task including the start and end times and running status. \r\n\r\nBelow is progress information for the particular run step. When the last line shows “\\***DONE***”, the step is supposed to be completed. Users may refresh this page and move on to the next step. \r\n\r\nAfter the pre-processing completes, refresh the page and buttons for the rest steps will appear in the middle dialog box. Users may click on buttons in sequence  to generate an alignment. For every step, when the last line shows “\\***DONE***”, the task is completed and you can move on to the next step.\r\n\r\n**Downloading results**\r\nAfter all jobs are done, users may click on the red “finish” button and download the results generated in every step.\r\n\r\n\r\n<a name=\"4\" />\r\n##Part B: Local virtual machine\r\nIf you need to construct alignments with large-scale data, we strongly recommend you to download our virtual machine with all required dependencies installed, and run the services locally. Detailed instructions and examples are as follow.\r\n\r\n<a name=\"4.1\" />\r\n####**Availability**\r\nLocal packed archive containing software and configuration file for local machine is available from http://114.212.172.30:3000/about/XXX.\r\n\r\n<a name=\"4.2\" />\r\n####**Notice**\r\nBefore you start to implement, there are several things to Notice here.\r\n1. The virtual machine could apply to windows7/windows8/windows10 systems, but it can only be deployable in a 64bit environment. If you are an apple system user, make sure your system have been upgraded to mac OS X Yosemite 10.10 or above.\r\n2.\tThe configuration of virtual machine needs at least 4 GB of memory, 1 CPU quad core or dual-core CPUs with hyper-threading enabled.\r\n3.\tTry to use the recommended version of software.\r\n4.\tSome System security software might conflict with virtual machine, so please exit them before using local EGA service.\r\n\r\n<a name=\"4.3\" />\r\n####**Instruction**\r\n\r\n**1. Install VirtualBox:**\r\nIt is necessary to download and install VirtualBox to provide the platform to run the VM(Virtual Machine). The current version of VirtualBox is 5.0.6 for both Mac and Windows. You can obtain it for free by visiting …….\r\n\r\nAfter installing VirtualBox, users are required to install the extension pack of the same version, which can be obtained by visiting……\r\n\r\nDouble click on the extension pack, it will be installed automatically into VirtualBox.\r\n\r\n**2. Download EGA VM and import it into VirtualBox:**\r\nThe EGA Virtual Machine (egavm.ova) can be downloaded from ……\r\n\r\nOnce complete, start VirtualBox and click on “File”, then choose “Import virtual machine”. Choose egavm.ova in the current dialog box to start the import.\r\n\r\nMake sure the OS Type is “Ubuntu (64 bit)” and RAM meets the requirement. \r\n\r\nAfter successfully importing the VM, you will see the following window. The VM is now in a stopped state.\r\n\r\n**3. Start VM and open a terminal window in the VM GUI:**\r\nClick on the “Start” button and wait for the VM to start. This may take a few seconds. Then, the desktop will appear as below.\r\n\r\n**4. Visit the EGA website:**\r\nClick on the terminal icon on the panel on the left, and run the following command :\r\n>cd ~/Scripts/ega && node app.js\r\n\r\nYou can visit the website in two ways:\r\n\r\n\tEither outside the VM GUI, open your browser and visit http://localhost:30080\r\n\tor, inside VM GUI, open browser and visit http://localhost:3000\r\n**5. Follow the instructions in Part A to start your alignment.**\r\n\r\n<a name=\"5\" />\r\n##FAQ\r\n\r\n<a name=\"5.1\" />\r\n####**Q:What types of data does EGA support?**\r\n\tA: For sequences downloaded from NCBI, users can upload directly. If your data are downloaded elsewhere, process your data with the perl command we offer in the previous instruction before you upload them.\r\nIf you are using a web-based EGA, the file size is limited to 30M for each uploaded file. If you are using the local VM, there is no file size limit.\r\n\r\n<a name=\"5.2\" />\r\n####**Q:Explanation of result files and file format**\r\n\r\n<a name=\"5.3\" />\r\n####对align的结果统计和展示\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}